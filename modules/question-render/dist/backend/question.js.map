{"version":3,"sources":["question.ts"],"names":["generateFlow","data","metadata","lesson","JSON","parse","lessonInput","transitions","createTransitions","flow","nodes","createNodes","catchAll","next","name","onEnter","type","sdk","NodeActionType","RenderText","question","caption","condition","node"],"mappings":";;;;;;;AAAA;;;;;;AAGA,MAAMA,YAAY,GAAG,OAAOC,IAAP,EAAkBC,QAAlB,KAA6F;AAChH,QAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWJ,IAAI,CAACK,WAAhB,CAAf;AACA,SAAO;AACLC,IAAAA,WAAW,EAAEC,iBAAiB,EADzB;AAELC,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAEC,WAAW,CAACR,MAAD,CADd;AAEJS,MAAAA,QAAQ,EAAE;AACRC,QAAAA,IAAI,EAAE;AADE;AAFN;AAFD,GAAP;AASD,CAXD;;AAaA,MAAMF,WAAW,GAAGV,IAAI,IAAI;AAC1B,QAAMS,KAA0B,GAAG,CACjC;AACEI,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,OAAO,EAAE,CACP;AACEC,MAAAA,IAAI,EAAEC,GAAG,CAACC,cAAJ,CAAmBC,UAD3B;AAEEL,MAAAA,IAAI,EAAG,aAAYb,IAAI,CAACmB,QAAS;AAFnC,KADO,CAFX;AAQEP,IAAAA,IAAI,EAAE;AARR,GADiC,CAAnC;AAYA,SAAOH,KAAP;AACD,CAdD;;AAgBA,MAAMF,iBAAiB,GAAG,MAA4B;AACpD,SAAO,CACL;AAAEa,IAAAA,OAAO,EAAE,YAAX;AAAyBC,IAAAA,SAAS,EAAE,YAApC;AAAkDC,IAAAA,IAAI,EAAE;AAAxD,GADK,EAEL;AAAEF,IAAAA,OAAO,EAAE,YAAX;AAAyBC,IAAAA,SAAS,EAAE,aAApC;AAAmDC,IAAAA,IAAI,EAAE;AAAzD,GAFK,CAAP;AAID,CALD;;eAOe;AAAEvB,EAAAA;AAAF,C","sourceRoot":"/home/letuan/Work/chatbot/botpress/modules/question-render/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport _ from 'lodash'\n\nconst generateFlow = async (data: any, metadata: sdk.FlowGeneratorMetadata): Promise<sdk.FlowGenerationResult> => {\n  const lesson = JSON.parse(data.lessonInput);\n  return {\n    transitions: createTransitions(),\n    flow: {\n      nodes: createNodes(lesson),\n      catchAll: {\n        next: []\n      }\n    }\n  }\n}\n\nconst createNodes = data => {\n  const nodes: sdk.SkillFlowNode[] = [\n    {\n      name: 'entry',\n      onEnter: [\n        {\n          type: sdk.NodeActionType.RenderText,\n          name: `{\"text\": \"${data.question}\"}`\n        }\n      ],\n      next: []\n    }\n  ]\n  return nodes\n}\n\nconst createTransitions = (): sdk.NodeTransition[] => {\n  return [\n    { caption: 'On success', condition: 'temp.valid', node: '' },\n    { caption: 'On failure', condition: '!temp.valid', node: '' }\n  ]\n}\n\nexport default { generateFlow }\n"]}